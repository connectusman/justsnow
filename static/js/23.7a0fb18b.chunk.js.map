{"version":3,"sources":["views/Ifos/components/Hero.tsx","views/Ifos/hooks/v3/useGetPublicIfoData.ts","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/GetLpModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos/components/IfoFoldableCard/Timer.tsx","views/Ifos/components/IfoFoldableCard/Achievement.tsx","views/Ifos/components/IfoFoldableCard/index.tsx","views/Ifos/components/IfoLayout.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/index.tsx"],"names":["StyledHero","styled","div","theme","isDark","CurtainBottom","Hero","t","useTranslation","mb","Container","as","scale","bold","fontSize","useGetPublicIfoData","fastRefresh","useRefresh","useState","status","costPresale","listingPrice","softcap","hardcap","sold","decimals","name","symbol","link","logolink","headerlogo","isWhitelistOn","round","users","maxUserAmount","startPresaleTime","endPresaleTime","paused","ILOToken","state","setState","address","useBlock","currentBlock","getIfov3Address","fetchIfoData","useCallback","a","ifoCalls","map","method","multicallv2","ifoV3Abi","prev","useEffect","TokenSection","primaryToken","children","props","alt","width","style","objectFit","src","Label","color","textTransform","Value","wordBreak","IfoCardTokens","publicIfoData","account","useWeb3React","useTooltip","placement","tooltip","targetRef","tooltipVisible","ilotoken","useERC20","toString","bnbcommited","setbnbcommited","tokenRecieved","settokenRecieved","getFullDisplayBalance","balanceOf","bal","console","log","BigNumber","times","loadData","pb","concat","tokens","wbnb","GetLpModal","currency","onDismiss","title","maxWidth","multiplierValues","gasPrice","BIG_TEN","pow","BIG_NINE","ContributeModal","onSuccess","value","setValue","userCurrencyBalance","useGetBnbBalance","balance","useToast","toastError","toastSuccess","contract","useIfoV3Contract","DEFAULT_TOKEN_DECIMAL","isDisable","setIsDisable","onUserInput","e","Number","getDecimalAmount","textAlign","justifyContent","multiplierValue","index","variant","onClick","mr","length","disabled","buyPresale","tx","wait","ContributeButton","iswhite","setIswhite","isInList","handleContributeSuccess","amount","useModal","onPresentContributeModal","onPresentGetLpModal","isEqualTo","IfoCardActions","ConnectWalletButton","SkeletonCardDetails","FooterEntry","label","alignItems","small","height","IfoCardDetails","paddingTop","SmallCard","PoolIds","poolBasic","poolUnlimited","Timer","countdownToUse","timeUntil","getTimePeriods","suffix","animation","day","days","hour","hours","minute","minutes","Flex","mediaQueries","md","AchievementFlex","isFinished","StyledLinkExternal","LinkExternal","Achievement","flexGrow","flexDirection","toFixed","href","StyledCard","Card","Header","CardHeader","FoldableContent","isActive","colors","gradients","bubblegum","dropdown","CardsWrapper","singleCard","StyledCardBody","CardBody","IfoFoldableCard","CardFooter","backgroundAlt","Ribbon","variantColor","ribbonPosition","text","getRibbonComponent","ribbon","primaryStep","IfoPoolCard","IfoLayout","textSubtle","Ifo","ifosConfig","find","ifo","Ifos","useRouteMatch","path","url","isExact","exact","CurrentIfo"],"mappings":"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","file":"static/js/23.7a0fb18b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\n\nconst getGradient = (isDark: boolean) => {\n  if (isDark) {\n    return 'repeating-linear-gradient(to right, #332453, #332453 40px, #281D44 40px, #281D44 80px)'\n  }\n\n  return 'repeating-linear-gradient(to right, #21d4e2, #21d4e2 40px, #53dee9 40px, #53dee9 80px)'\n}\n\nconst StyledHero = styled.div`\n  background: ${({ theme }) => getGradient(theme.isDark)};\n  padding-bottom: 40px;\n  padding-top: 40px;\n`\n\nconst CurtainBottom = styled.div`\n  background-image: url('/images/curtain-bottom-${({ theme }) => (theme.isDark ? 'dark' : 'light')}.png');\n  background-repeat: repeat-x;\n  background-size: contain;\n  height: 20px;\n`\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"32px\">\n      <StyledHero>\n        <Container>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\">\n            {t('Launchpad')}\n          </Heading>\n          <Text bold fontSize=\"20px\">\n            {t('Buy new tokens with a brand new token sale model.')}\n          </Text>\n        </Container>\n      </StyledHero>\n      <CurtainBottom />\n    </Box>\n  )\n}\n\nexport default Hero\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useBlock } from 'state/block/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport ifoV3Abi from 'config/abi/ifoV3.json'\nimport { useIfoV3Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport { getIfov3Address } from 'utils/addressHelpers'\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\n\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (): any => {\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: -2,\n    costPresale:-2,\n    listingPrice:-2,\n    softcap:-2,\n    hardcap:-2,\n    sold:-2,\n    decimals:-2,\n    name:\"\",\n    symbol:\"\",\n    link:\"\",\n    logolink:\"\",\n    headerlogo:\"\",\n    isWhitelistOn:false,\n    round:-1,\n    users:-2,\n    maxUserAmount:-2,\n    startPresaleTime:-2,\n    endPresaleTime:-2,\n    paused:true,\n    ILOToken:\"\"\n  })\n  const { currentBlock } = useBlock()\n\n const address=getIfov3Address();\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['status',\n    'costPresale',\n    'listingPrice',\n    'softcap',\n    'hardcap',\n    'sold',\n    'decimals',\n    'name',\n    'symbol',\n    'link',\n    'logolink',\n    'headerlogo',\n    'isWhitelistOn',\n    'round',\n    'users',\n    'maxUserAmount',\n    'startPresaleTime',\n    'endPresaleTime',\n    'paused',\n    'ILOToken'].map((method) => ({\n      address,\n      name: method,\n    }))\n\n    const [status,\n      costPresale,\n      listingPrice,\n      softcap,\n      hardcap,\n      sold,\n      decimals,\n      name,\n      symbol,\n      link,\n      logolink,\n      headerlogo,\n      isWhitelistOn,\n      round,\n      users,\n      maxUserAmount,\n      startPresaleTime,\n      endPresaleTime,\n      paused,\n      ILOToken  ] = await multicallv2(ifoV3Abi, ifoCalls)\n      setState((prev) => ({\n        status,\n      costPresale,\n      listingPrice,\n      softcap,\n      hardcap,\n      sold,\n      decimals,\n      name,\n      symbol,\n      link,\n      logolink,\n      headerlogo,\n      isWhitelistOn,\n      round,\n      users,\n      maxUserAmount,\n      startPresaleTime,\n      endPresaleTime,\n      paused,\n      ILOToken \n      }))\n  },[address])\n    \n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n\n return {...state}\n}\n\nexport default useGetPublicIfoData\n","import React, { useEffect, useState } from 'react'\nimport {\n  Text,\n  Flex,\n  Box,\n  CheckmarkCircleIcon,\n  FlexProps,\n  HelpIcon,\n  useTooltip,\n  Button,\n  AutoRenewIcon,\n  BunnyPlaceholderIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Ifo, PoolIds, Token } from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { PublicIfoData3, WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useERC20 } from 'hooks/useContract'\nimport BigNumber from 'bignumber.js'\n\ninterface TokenSectionProps extends FlexProps {\n  primaryToken?: string\n}\n\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, children, ...props }) => {\n  const renderTokenComponent = () => {\n  \n      return <img alt='icon' width={32} style={{objectFit:\"contain\"}} src={primaryToken} />\n    \n\n  \n\n    return null\n  }\n\n  return (\n    <Flex {...props}>\n      {renderTokenComponent()}\n      <div>{children}</div>\n    </Flex>\n  )\n}\n\n\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\n\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\n\ninterface IfoCardTokensProps {\n  publicIfoData: PublicIfoData3\n}\n\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\n  publicIfoData,\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\n      'Sorry,  You didn\\'t buy anything in this sale.',\n    ),\n    { placement: 'bottom' },\n  )\n\n  const ilotoken=useERC20(publicIfoData.ILOToken.toString());\n  const [bnbcommited, setbnbcommited] = useState(\"0\");\n      const [tokenRecieved, settokenRecieved] = useState(\"0\")\n  useEffect(()=>{\n    async function loadData() {\n      \n      const bal=getFullDisplayBalance( (await ilotoken.balanceOf(account)).toString(),18,0)\n      console.log(\"\",bal)\n      setbnbcommited((new BigNumber( bal).times(publicIfoData.costPresale).div(1000000000000000000)).toString())\n      settokenRecieved(bal)\n    }\n    if(account)\n    loadData();\n  },[account,ilotoken,publicIfoData]);\n  const renderTokenSection = () => {\n    \n    if (publicIfoData.status !==-1) {\n      return (\n        <>\n          <TokenSection primaryToken={'/images/tokens/'.concat(tokens.wbnb.address[97]).concat('.svg')}>\n            <Label>&nbsp;&nbsp;&nbsp;&nbsp;{t('Your BNB committed')}</Label>\n            <Value>&nbsp;&nbsp;&nbsp;&nbsp;{bnbcommited}</Value>\n          </TokenSection>\n          <br/>\n        \n          <TokenSection primaryToken={publicIfoData.logolink}>\n            <Label>&nbsp;&nbsp;&nbsp;&nbsp;{publicIfoData.symbol.concat(' Recieved')}</Label>\n            <Value>&nbsp;&nbsp;&nbsp;&nbsp;{tokenRecieved}</Value>\n          </TokenSection>\n          \n           \n        </>\n      )\n    }\n    \n    return null\n  }\n  return (\n    <Box pb=\"24px\">\n      {tooltipVisible && tooltip}\n      {renderTokenSection()}\n    </Box>\n  )\n}\n\nexport default IfoCardTokens\n","import React from 'react'\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props {\n  currency: Token\n  onDismiss?: () => void\n}\n\nconst GetLpModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal title={t('BNB required')} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"288px\">\n       \n        <Text mb=\"16px\">{t('You\\'ll need BNB to participate in the IFO!')}</Text>\n        \n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default GetLpModal\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData3 } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount, getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getAddress, getIfov3Address } from 'utils/addressHelpers'\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useERC20, useIfoV3Contract } from 'hooks/useContract'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { getContract } from 'utils'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n  onSuccess: (amount: BigNumber) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst ContributeModal: React.FC<Props> = ({\n  publicIfoData,\n  onDismiss,\n  onSuccess,\n}) => {\n\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const { balance: userCurrencyBalance } = useGetBnbBalance()\n  const { toastError, toastSuccess } = useToast()\n  console.log(userCurrencyBalance)\n  const contract=useIfoV3Contract(getIfov3Address());\n  const { t } = useTranslation()\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\n  const [isDisable, setIsDisable] = useState(false)\n \n \n\n  return (\n    <Modal title={t('', { })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"350px\">\n        \n        \n        <BalanceInput\n          value={value}\n          onUserInput={e=>{\n            setValue(e);\n            setIsDisable(Number(getDecimalAmount(new BigNumber(e),18))<Number(publicIfoData.costPresale));\n            \n          }}\n          mb=\"8px\"\n        />\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n          {t('Balance: ')+getFullDisplayBalance(userCurrencyBalance, 18, 6)}\n        </Text>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          {multiplierValues.map((multiplierValue, index) => (\n            <Button\n              key={multiplierValue}\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => setValue((Number(getFullDisplayBalance(userCurrencyBalance, 18, 6))*multiplierValue).toString())}\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\n            >\n              {multiplierValue * 100}%\n            </Button>\n          ))}\n        </Flex>\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n          {t(\n            'If you don\\'t commit enough BNB, you may not receive any ILO tokens at all and will only receive a full refund of your BNB.',\n          )}\n        </Text>\n        <Button\n          disabled={isDisable}\n          onClick={async ()=>{\n            try {\n              const tx = await contract.buyPresale({gasPrice,value:getDecimalAmount(new BigNumber(value)).toString()});\n              const receipt = await tx.wait()\n              if (receipt.status) {\n                toastSuccess(t('Token Recieved'), t('Token has been sent to your wallet.'))\n                \n                onDismiss()\n              }\n            } catch (error) {\n              toastError(t('Error'), t('You are not allowed to buy.'))\n            \n            }\n          }}\n        >Buy</Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","import React, { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { WalletIfoData, PublicIfoData3 } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getAddress, getIfov3Address } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\nimport {Address} from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { useIfoV3Contract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport GetLpModal from './GetLpModal'\nimport ContributeModal from './ContributeModal'\n\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\nconst ContributeButton: React.FC<Props> = ({ publicIfoData }) => {\n  const limitPerUserInLP  = publicIfoData.maxUserAmount\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const ilotokenaddress:Address={97:publicIfoData.ILOToken.toString()}\n  const { balance: userCurrencyBalance } = useGetBnbBalance()\n  const { account } = useWeb3React()\n  const contract=useIfoV3Contract(getIfov3Address());\n  const [iswhite, setIswhite] = useState(false);\n  useEffect(()=>{\n    async function loadData() {\n      \n        const tx = await contract.isInList(account);\n        if(tx.toString()===\"true\")\n          setIswhite(true);\n          \n      \n    }\n    if(account)\n    loadData();\n  },[account,contract,publicIfoData]);\n\n  // Refetch all the data, and display a message when fetching is done\n  const handleContributeSuccess = async (amount: BigNumber) => {\n  \n    toastSuccess(\n      t('Success!'),\n      t('You have contributed to this IFO!'),\n    )\n  }\n\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal\n      publicIfoData={publicIfoData}\n      onSuccess={handleContributeSuccess}\n    />,\n    false,\n  )\n\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={tokens.wbnb} />, false)\n\nif(iswhite)\n  {return (\n    <Button\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\n      width=\"100%\"\n    >Buy Presale\n    </Button>\n  )\n  }\n  return (\n    <div style={{textAlign:\"center\"}}>Sorry you are not whitelisted.</div>\n  )\n}\n\nexport default ContributeButton\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link } from 'react-router-dom'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ContributeButton from './ContributeButton'\nimport ClaimButton from './ClaimButton'\nimport { SkeletonCardActions } from './Skeletons'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\n\nconst IfoCardActions: React.FC<Props> = ({  publicIfoData}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  \n\n  return (\n    <>\n      {publicIfoData.status !==-1  && (\n        <ContributeButton publicIfoData={publicIfoData} />\n      )}\n    {/* sell button */}\n    </>\n  )\n}\n\nexport default IfoCardActions\n","import React from 'react'\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\n\nexport const SkeletonCardActions = () => {\n  return <Skeleton height=\"48px\" />\n}\n\nexport const SkeletonCardTokens = () => {\n  return (\n    <div>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n    </div>\n  )\n}\n\nexport const SkeletonCardDetails = () => {\n  return (\n    <div>\n      <Skeleton mb=\"8px\" />\n      <Skeleton />\n    </div>\n  )\n}\n\nexport default null\n","import React, { useEffect, useState } from 'react'\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport { SkeletonCardDetails } from './Skeletons'\n\n\nexport interface IfoCardDetailsProps {\n  \n  publicIfoData: PublicIfoData3\n}\n\nexport interface FooterEntryProps {\n  label: string\n  value: string | number\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      {value ? (\n        <Text small textAlign=\"right\">\n          {value}\n        </Text>\n      ) : (\n        <Skeleton height={21} width={80} />\n      )}\n    </Flex>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({  publicIfoData }) => {\n  const { t } = useTranslation()\n  const status  = Number(publicIfoData.status)\n \n  \n   \n    \n  \nif(status!==-2)\n  return <Box paddingTop=\"24px\">\n    <FooterEntry label={t('Max BNB entry:')} value={publicIfoData.maxUserAmount/publicIfoData.costPresale} />\n  <FooterEntry label={t('BNB raised:')} value={(\"\".concat(getFullDisplayBalance(new BigNumber(publicIfoData.sold), publicIfoData.decimals, 2).toString()))} />\n  <FooterEntry label={t('Token sold:')} value={(\"\".concat((Number(publicIfoData.sold)/Number(publicIfoData.costPresale)).toString()))} />\n  <FooterEntry label={t('Price Per BNB:')} value={(1000000000000000000/publicIfoData.costPresale).toString().concat(\" \").concat(publicIfoData.symbol.toString())} />\n  </Box>\n  return <Box paddingTop=\"24px\">\n  <SkeletonCardDetails />\n  </Box>\n}\n\nexport default IfoCardDetails\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Card, CardBody, CardHeader, Text, useTooltip, HelpIcon, Flex } from '@pancakeswap/uikit'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { EnableStatus } from '../types'\nimport IfoCardTokens from './IfoCardTokens'\nimport IfoCardActions from './IfoCardActions'\nimport IfoCardDetails from './IfoCardDetails'\n\ninterface IfoCardProps {\n\n  publicIfoData: PublicIfoData3\n\n}\n\ninterface CardConfig {\n  [key: string]: {\n    title: string\n    variant: 'blue' | 'violet'\n    tooltip: string\n  }\n}\n\nconst cardConfig: CardConfig = {\n  [PoolIds.poolBasic]: {\n    title: 'Basic Sale',\n    variant: 'blue',\n    tooltip: 'Every person can only commit a limited amount, but may expect a higher return per token committed.',\n  },\n  [PoolIds.poolUnlimited]: {\n    title: 'Unlimited Sale',\n    variant: 'violet',\n    tooltip: 'No limits on the amount you can commit. Additional fee applies when claiming.',\n  },\n}\n\nconst SmallCard: React.FC<IfoCardProps> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  \n\n  return (\n    <>\n    \n      <Card>\n      \n        <CardHeader variant='violet'>\n        \n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text bold fontSize=\"20px\">\n              {publicIfoData.round.toString()===\"1\"?\"Round 1\":publicIfoData.round.toString()===\"2\"?\"Round 2\":publicIfoData.round.toString()===\"3\"?\"Final Round\":\"\"}\n            </Text>\n            \n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <IfoCardTokens\n            publicIfoData={publicIfoData}\n          />\n          <IfoCardActions\n            publicIfoData={publicIfoData}\n          />\n          <IfoCardDetails  publicIfoData={publicIfoData} />\n        </CardBody>\n      </Card>\n    </   >\n  )\n}\n\nexport default SmallCard\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Link, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { PublicIfoData3 } from 'views/Ifos/types'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\n\nconst Timer: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status } = publicIfoData\n  const countdownToUse = status === -1 ? publicIfoData.startPresaleTime :  publicIfoData.endPresaleTime\n  console.log(Number(publicIfoData.startPresaleTime),Number(publicIfoData.endPresaleTime))\n  const timeUntil = getTimePeriods(countdownToUse)\n  const suffix = status === -1 ? t('Start') : t('Finish')\n  return (\n    <Flex justifyContent=\"center\" mb=\"32px\">\n      {status ===-1 ? (\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\n      ) : (\n        <>\n          <PocketWatchIcon width=\"48px\" mr=\"16px\" />\n          <Flex alignItems=\"center\">\n            <Text bold mr=\"16px\">        \n              {suffix}:\n            </Text>\n            <Text>\n              {t('%day%d %hour%h %minute%m', {\n                day: timeUntil.days,\n                hour: timeUntil.hours,\n                minute: timeUntil.minutes,\n              })}\n            </Text>\n           \n          </Flex>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default Timer\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, LinkExternal, Image, Text, PrizeIcon, Skeleton, WalletIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { Ifo } from 'config/constants/types'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { getBscScanLink } from 'utils'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\n\nconst MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\n\nconst Container = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n    align-items: initial;\n  }\n`\n\nconst AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\n  ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  margin-top: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n  }\n`\n\nconst Achievement: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n\n\n  return (\n    <Container>\n      <AchievementFlex isFinished={publicIfoData.status === 0} alignItems=\"center\" flexGrow={1}>\n        <Flex flexDirection=\"column\">\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('Launchpad: %title%', { title: publicIfoData.name })}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <WalletIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\n              <Text color=\"textSubtle\">{Number(publicIfoData.users)} &nbsp;</Text>\n              <Text color=\"textSubtle\">{\" Participants\"}</Text>\n            </Flex>\n          </Flex>\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('Listing Price:')}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <Text color=\"textSubtle\">1 BNB =  &nbsp;</Text>\n              <Text color=\"textSubtle\">{(1000000000000000000/publicIfoData.listingPrice).toFixed(2)}&nbsp;{publicIfoData.symbol}</Text>\n            </Flex>\n          </Flex>\n          <StyledLinkExternal href={publicIfoData.link} mb=\"8px\">\n          {t('Learn more about %title%', { title: publicIfoData.name })}\n        </StyledLinkExternal>\n        </Flex>\n      </AchievementFlex>\n      <Flex alignItems=\"flex-end\" flexDirection=\"column\">\n      <Flex>\n            <Text bold mr=\"8px\">\n              {t('Softcap: ')}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <Text color=\"textSubtle\">{Number(publicIfoData.softcap)/1000000000000000000}&nbsp;BNB</Text>\n           </Flex>\n          </Flex>\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('Hardcap: ')}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <Text color=\"textSubtle\">{Number(publicIfoData.hardcap)/1000000000000000000}&nbsp;BNB</Text>\n           </Flex>\n          </Flex>\n        <StyledLinkExternal href=\"asd\">{t('View Contract')}</StyledLinkExternal>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default Achievement\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardRibbon,\n  ExpandableButton,\n  Progress,\n  Button,\n  ChevronUpIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { Address } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { EnableStatus } from './types'\nimport IfoPoolCard from './IfoPoolCard'\nimport Timer from './Timer'\nimport Achievement from './Achievement'\n\n\n\ninterface IfoFoldableCardProps {\n  publicIfoData: PublicIfoData3\n}\n\nconst getRibbonComponent = (status: string, t: any) => {\n  if (status === 'cancelled') {\n    return <CardRibbon variantColor=\"textDisabled\" ribbonPosition=\"left\" text={t('Coming Soon')} />\n  }\n\n  if (status === 'live' || (status === 'finished')) {\n    return (\n      <CardRibbon\n        variantColor=\"primary\"\n        ribbonPosition=\"left\"\n        style={{ textTransform: 'uppercase' }}\n        text={status === 'live' ? `${t('Live')}!` : `${t('Finished')}!`}\n      />\n    )\n  }\n\n  return null\n}\n\nconst StyledCard = styled(Card)`\n  max-width: 736px;\n  width: 100%;\n  margin: auto;\n  \n`\n\nconst Header = styled(CardHeader)`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: 112px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background:#000000;\n`\n\nconst FoldableContent = styled.div<{ isActive: boolean }>`\n  display: block;\n  background: ${({ isActive, theme }) => (isActive ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\n`\n\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\n  display: block;\n  margin-left: 25%;\n  margin-right: 25%;\n  margin-bottom: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  padding: 24px 16px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 24px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  text-align: center;\n  padding: 8px;\n  background: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nconst IfoFoldableCard: React.FC<IfoFoldableCardProps> = ({  publicIfoData }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const Ribbon = getRibbonComponent(Number(publicIfoData.status)===-1?'cancelled':Number(publicIfoData.status)===0?'live':Number(publicIfoData.status)===1?\"success and Live\":Number(publicIfoData.status)===2?\"finished\":\"\", t)\n  const isActive = publicIfoData.status !== 2&& publicIfoData.status !== -1\n \n  const { toastSuccess } = useToast()\n\n\n\n  \n\n  return (\n    <StyledCard ribbon={Ribbon}>\n    <Header >\n      <img alt='mainlogo' src={publicIfoData.headerlogo}/>\n    </Header>\n      <FoldableContent  isActive={publicIfoData.status !== -1 && publicIfoData.status !== 2}>\n        {isActive && <Progress variant=\"flat\" primaryStep={100*(publicIfoData.sold/publicIfoData.softcap)} />}\n        <StyledCardBody>\n          {isActive && <Timer publicIfoData={publicIfoData} />}\n          <div style={{textAlign:\"center\"}}>\n              {publicIfoData.name}\n              {\n              /*  publicIfoData.maxUserAmount.toString()===\"0\"?<h1>No Limit</h1>:<div><h1>Limit</h1>&nbsp;{getFullDisplayBalance(new BigNumber(publicIfoData.maxUserAmount),18,2).concat(\" BNB per User\")}</div>  */\n              }\n            </div>\n            <br/>\n          <CardsWrapper singleCard={!false}>\n          \n              <IfoPoolCard\n                publicIfoData={publicIfoData}\n              />\n            \n            \n          </CardsWrapper>\n          <Achievement publicIfoData={publicIfoData} />\n        </StyledCardBody>\n        \n      </FoldableContent>\n    </StyledCard>\n  )\n}\n\nexport default IfoFoldableCard\n","import styled from 'styled-components'\n\nconst IfoLayout = styled.div`\n  display: flex;\n  padding: 40px 0;\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport default IfoLayout\n","import React, { useEffect } from 'react'\nimport { ifosConfig } from 'config/constants'\nimport useGetPublicIfoData from 'views/Ifos/hooks/v3/useGetPublicIfoData'\nimport { useERC20 } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceAmount, getBalanceNumber, getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\nimport IfoFoldableCard from './components/IfoFoldableCard'\nimport IfoLayout from './components/IfoLayout'\nimport { PublicIfoData3 } from './types'\n\n\n\n\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  \n  const publicIfoData:PublicIfoData3 = useGetPublicIfoData()\n  \n if(publicIfoData.status!==-2)\n {\n   \n  return (\n    <IfoLayout>\n      <IfoFoldableCard  publicIfoData={publicIfoData}  />\n      \n    </IfoLayout>\n  )\n }\n  return (\n    <IfoLayout/>\n  )\n}\n\nexport default Ifo\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Flex } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport Hero from './components/Hero'\nimport CurrentIfo from './CurrentIfo'\nimport PastIfo from './PastIfo'\n\nconst Ifos = () => {\n  const { t } = useTranslation()\n  const { path, url, isExact } = useRouteMatch()\n\n  return (\n    <>\n      <Hero />\n      <Container>\n        \n        <Route exact path={`${path}`}>\n          <CurrentIfo />\n        </Route>\n       \n      </Container>\n    </>\n  )\n}\n\nexport default Ifos\n"],"sourceRoot":""}