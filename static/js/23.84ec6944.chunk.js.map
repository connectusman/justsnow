{"version":3,"sources":["views/Ifos/components/Hero.tsx","views/Ifos/hooks/v3/useGetPublicIfoData.ts","views/Ifos/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/GetLpModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos/components/IfoFoldableCard/Timer.tsx","views/Ifos/components/IfoFoldableCard/Achievement.tsx","views/Ifos/hooks/useIfoApprove.ts","views/Ifos/components/IfoFoldableCard/index.tsx","views/Ifos/components/IfoLayout.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/index.tsx"],"names":["StyledHero","styled","div","theme","isDark","CurtainBottom","Hero","t","useTranslation","mb","Container","as","scale","bold","fontSize","useGetPublicIfoData","fastRefresh","useRefresh","useState","status","costPresale","softcap","hardcap","sold","decimals","name","symbol","link","users","maxUserAmount","startPresaleTime","endPresaleTime","paused","ILOToken","state","setState","address","useBlock","currentBlock","getPointCenterIfoAddress","fetchIfoData","useCallback","a","ifoCalls","map","method","multicallv2","ifoV3Abi","prev","useEffect","SkeletonCardDetails","TokenSection","primaryToken","secondaryToken","children","props","variant","height","width","mr","TokenImage","token","CakeBnbTokenSection","tokens","cake","wbnb","Label","color","textTransform","Value","style","wordBreak","IfoCardTokens","publicIfoData","onApprove","useWeb3React","account","useTooltip","placement","tooltip","targetRef","tooltipVisible","pb","pl","ratio","mt","onClick","alignItems","ml","GetLpModal","currency","onDismiss","title","maxWidth","multiplierValues","gasPrice","BIG_TEN","times","pow","BIG_NINE","toString","ContributeModal","onSuccess","value","setValue","userCurrencyBalance","useGetBnbBalance","balance","console","log","contract","useIfoV3Contract","BigNumber","DEFAULT_TOKEN_DECIMAL","isDisable","setIsDisable","onUserInput","e","Number","getDecimalAmount","textAlign","getFullDisplayBalance","justifyContent","multiplierValue","index","length","disabled","buyPresale","ContributeButton","toastSuccess","useToast","handleContributeSuccess","amount","useModal","onPresentContributeModal","onPresentGetLpModal","isEqualTo","IfoCardActions","ConnectWalletButton","FooterEntry","label","small","IfoCardDetails","paddingTop","concat","SmallCard","PoolIds","poolBasic","poolUnlimited","useProfile","hasProfile","isLoading","ref","Timer","countdownToUse","timeUntil","getTimePeriods","suffix","toLowerCase","animation","day","days","hour","hours","minute","minutes","Flex","mediaQueries","md","AchievementFlex","isFinished","StyledLinkExternal","LinkExternal","Achievement","flexGrow","flexDirection","href","useIfoApprove","tokenContract","spenderAddress","approve","ethers","constants","MaxUint256","tx","wait","StyledCard","Card","Header","CardHeader","FoldableContent","isActive","colors","gradients","bubblegum","dropdown","CardsWrapper","singleCard","StyledCardBody","CardBody","IfoFoldableCard","CardFooter","backgroundAlt","raisingTokenContract","useERC20","getAddress","Ribbon","variantColor","ribbonPosition","text","getRibbonComponent","handleApprove","ribbon","primaryStep","IfoPoolCard","IfoLayout","textSubtle","Ifo","ifosConfig","find","ifo","Ifos","useRouteMatch","path","url","isExact","exact","CurrentIfo"],"mappings":"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","file":"static/js/23.84ec6944.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\n\nconst getGradient = (isDark: boolean) => {\n  if (isDark) {\n    return 'repeating-linear-gradient(to right, #332453, #332453 40px, #281D44 40px, #281D44 80px)'\n  }\n\n  return 'repeating-linear-gradient(to right, #21d4e2, #21d4e2 40px, #53dee9 40px, #53dee9 80px)'\n}\n\nconst StyledHero = styled.div`\n  background: ${({ theme }) => getGradient(theme.isDark)};\n  padding-bottom: 40px;\n  padding-top: 40px;\n`\n\nconst CurtainBottom = styled.div`\n  background-image: url('/images/curtain-bottom-${({ theme }) => (theme.isDark ? 'dark' : 'light')}.png');\n  background-repeat: repeat-x;\n  background-size: contain;\n  height: 20px;\n`\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"32px\">\n      <StyledHero>\n        <Container>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\">\n            {t('IFO: Initial Farm Offerings')}\n          </Heading>\n          <Text bold fontSize=\"20px\">\n            {t('Buy new tokens with a brand new token sale model.')}\n          </Text>\n        </Container>\n      </StyledHero>\n      <CurtainBottom />\n    </Box>\n  )\n}\n\nexport default Hero\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useBlock } from 'state/block/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport ifoV3Abi from 'config/abi/ifoV3.json'\nimport { useIfoV3Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\n\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (): any => {\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: -2,\n    costPresale:-2,\n    softcap:-2,\n    hardcap:-2,\n    sold:-2,\n    decimals:-2,\n    name:\"\",\n    symbol:\"\",\n    link:\"\",\n    users:-2,\n    maxUserAmount:-2,\n    startPresaleTime:-2,\n    endPresaleTime:-2,\n    paused:true,\n    ILOToken:\"\"\n  })\n  const { currentBlock } = useBlock()\n\n const address=getPointCenterIfoAddress();\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['status',\n    'costPresale',\n    'softcap',\n    'hardcap',\n    'sold',\n    'decimals',\n    'name',\n    'symbol',\n    'link',\n    'users',\n    'maxUserAmount',\n    'startPresaleTime',\n    'endPresaleTime',\n    'paused',\n    'ILOToken'].map((method) => ({\n      address,\n      name: method,\n    }))\n\n    const [status,\n      costPresale,\n      softcap,\n      hardcap,\n      sold,\n      decimals,\n      name,\n      symbol,\n      link,\n      users,\n      maxUserAmount,\n      startPresaleTime,\n      endPresaleTime,\n      paused,\n      ILOToken  ] = await multicallv2(ifoV3Abi, ifoCalls)\n      setState((prev) => ({\n        status,\n      costPresale,\n      softcap,\n      hardcap,\n      sold,\n      decimals,\n      name,\n      symbol,\n      link,\n      users,\n      maxUserAmount,\n      startPresaleTime,\n      endPresaleTime,\n      paused,\n      ILOToken \n      }))\n  },[address])\n    \n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n\n return {...state}\n}\n\nexport default useGetPublicIfoData\n","import React from 'react'\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\n\nexport const SkeletonCardActions = () => {\n  return <Skeleton height=\"48px\" />\n}\n\nexport const SkeletonCardTokens = () => {\n  return (\n    <div>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n    </div>\n  )\n}\n\nexport const SkeletonCardDetails = () => {\n  return (\n    <div>\n      <Skeleton mb=\"8px\" />\n      <Skeleton />\n    </div>\n  )\n}\n\nexport default null\n","import React from 'react'\nimport {\n  Text,\n  Flex,\n  Box,\n  CheckmarkCircleIcon,\n  FlexProps,\n  HelpIcon,\n  useTooltip,\n  Button,\n  AutoRenewIcon,\n  BunnyPlaceholderIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Ifo, PoolIds, Token } from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { PublicIfoData3, WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\nimport { EnableStatus } from '../types'\nimport PercentageOfTotal from './PercentageOfTotal'\nimport { SkeletonCardTokens } from './Skeletons'\n\ninterface TokenSectionProps extends FlexProps {\n  primaryToken?: Token\n  secondaryToken?: Token\n}\n\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, secondaryToken, children, ...props }) => {\n  const renderTokenComponent = () => {\n    if (!primaryToken) {\n      return <BunnyPlaceholderIcon width={32} mr=\"16px\" />\n    }\n\n    if (primaryToken && secondaryToken) {\n      return (\n        <TokenPairImage\n          variant=\"inverted\"\n          primaryToken={primaryToken}\n          height={32}\n          width={32}\n          secondaryToken={secondaryToken}\n          mr=\"16px\"\n        />\n      )\n    }\n\n    return <TokenImage token={primaryToken} height={32} width={32} mr=\"16px\" />\n  }\n\n  return (\n    <Flex {...props}>\n      {renderTokenComponent()}\n      <div>{children}</div>\n    </Flex>\n  )\n}\n\nconst CakeBnbTokenSection: React.FC<TokenSectionProps> = (props) => {\n  return <TokenSection primaryToken={tokens.cake} secondaryToken={tokens.wbnb} {...props} />\n}\n\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\n\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\n\ninterface IfoCardTokensProps {\n  publicIfoData: PublicIfoData3\n  onApprove: () => Promise<any>\n}\n\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\n\n  publicIfoData,\n  onApprove,\n\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\n      'Sorry, you didn\\'t contribute enough LP tokens to meet the minimum threshold. You didn\\'t buy anything in this sale, but you can still reclaim your LP tokens.',\n    ),\n    { placement: 'bottom' },\n  )\n\n\n  const renderTokenSection = () => {\n    if (false) {\n      return <SkeletonCardTokens />\n    }\n   \n    if (publicIfoData.status === -1) {\n      return (\n        <>\n          <TokenSection>\n            <Label>{t('On sale')}</Label>\n            <Value>asd</Value>\n          </TokenSection>\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">\n            {t('%ratio%% of total sale', { ratio:\"as\" })}\n          </Text>\n         \n            <Button\n              width=\"100%\"\n              mt=\"16px\"\n              onClick={onApprove}\n            >\n              {t('Enable')}\n            </Button>\n          \n        </>\n      )\n    }\n    if (publicIfoData.status === 0) {\n      return (\n        <>\n          <CakeBnbTokenSection mb=\"24px\">\n            <Label>{t('Your %symbol% committed')}</Label>\n            <Value>asd</Value>\n            \n          </CakeBnbTokenSection>\n          \n        </>\n      )\n    }\n    if (publicIfoData.status === 2) {\n      return  (\n         \n        <>\n          <CakeBnbTokenSection mb=\"24px\">\n            <Label>\n              {t('Your %symbol% TO RECLAIM')}\n            </Label>\n            <Flex alignItems=\"center\">\n              <Value>asd</Value>\n               <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />\n            </Flex>\n           \n          </CakeBnbTokenSection>\n         \n        </>\n      )\n    }\n    return null\n  }\n  return (\n    <Box pb=\"24px\">\n      {tooltipVisible && tooltip}\n      {renderTokenSection()}\n    </Box>\n  )\n}\n\nexport default IfoCardTokens\n","import React from 'react'\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props {\n  currency: Token\n  onDismiss?: () => void\n}\n\nconst GetLpModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal title={t('BNB required')} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"288px\">\n       \n        <Text mb=\"16px\">{t('You\\'ll need BNB to participate in the IFO!')}</Text>\n        \n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default GetLpModal\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData3 } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount, getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getAddress, getPointCenterIfoAddress } from 'utils/addressHelpers'\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useERC20, useIfoV3Contract } from 'hooks/useContract'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { getContract } from 'utils'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n  onSuccess: (amount: BigNumber) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst ContributeModal: React.FC<Props> = ({\n  publicIfoData,\n  onDismiss,\n  onSuccess,\n}) => {\n\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const { balance: userCurrencyBalance } = useGetBnbBalance()\n  console.log(userCurrencyBalance)\n  const contract=useIfoV3Contract(getPointCenterIfoAddress());\n  const { t } = useTranslation()\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\n  const [isDisable, setIsDisable] = useState(false)\n \n \n\n  return (\n    <Modal title={t('', { })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"350px\">\n        \n        \n        <BalanceInput\n          value={value}\n          onUserInput={e=>{\n            setValue(e);\n            setIsDisable(Number(getDecimalAmount(new BigNumber(e),18))<Number(publicIfoData.costPresale));\n            \n          }}\n          mb=\"8px\"\n        />\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n          {t('Balance: ')+getFullDisplayBalance(userCurrencyBalance, 18, 6)}\n        </Text>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          {multiplierValues.map((multiplierValue, index) => (\n            <Button\n              key={multiplierValue}\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => setValue((Number(getFullDisplayBalance(userCurrencyBalance, 18, 6))*multiplierValue).toString())}\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\n            >\n              {multiplierValue * 100}%\n            </Button>\n          ))}\n        </Flex>\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n          {t(\n            'If you don\\'t commit enough BNB, you may not receive any ILO tokens at all and will only receive a full refund of your BNB.',\n          )}\n        </Text>\n        <Button\n          disabled={isDisable}\n          onClick={async ()=>{\n            console.log()\n           await contract.buyPresale({gasPrice,value:getDecimalAmount(new BigNumber(value)).toString()});\n           onDismiss()\n          }}\n        >Buy</Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { WalletIfoData, PublicIfoData3 } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\nimport {Address} from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport GetLpModal from './GetLpModal'\nimport ContributeModal from './ContributeModal'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\nconst ContributeButton: React.FC<Props> = ({ publicIfoData }) => {\n  const limitPerUserInLP  = publicIfoData.maxUserAmount\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const ilotokenaddress:Address={97:publicIfoData.ILOToken.toString()}\n  const { balance: userCurrencyBalance } = useGetBnbBalance()\n\n  // Refetch all the data, and display a message when fetching is done\n  const handleContributeSuccess = async (amount: BigNumber) => {\n  \n    toastSuccess(\n      t('Success!'),\n      t('You have contributed to this IFO!'),\n    )\n  }\n\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal\n      publicIfoData={publicIfoData}\n      onSuccess={handleContributeSuccess}\n    />,\n    false,\n  )\n\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={tokens.wbnb} />, false)\n\n\n  return (\n    <Button\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\n      width=\"100%\"\n    >Buy Presale\n    </Button>\n  )\n}\n\nexport default ContributeButton\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link } from 'react-router-dom'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ContributeButton from './ContributeButton'\nimport ClaimButton from './ClaimButton'\nimport { SkeletonCardActions } from './Skeletons'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\n\nconst IfoCardActions: React.FC<Props> = ({  publicIfoData}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  \n\n  return (\n    <>\n      {publicIfoData.status !==-1  && (\n        <ContributeButton publicIfoData={publicIfoData} />\n      )}\n    {/* sell button */}\n    </>\n  )\n}\n\nexport default IfoCardActions\n","import React, { useEffect, useState } from 'react'\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport { SkeletonCardDetails } from './Skeletons'\n\n\nexport interface IfoCardDetailsProps {\n  \n  publicIfoData: PublicIfoData3\n}\n\nexport interface FooterEntryProps {\n  label: string\n  value: string | number\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      {value ? (\n        <Text small textAlign=\"right\">\n          {value}\n        </Text>\n      ) : (\n        <Skeleton height={21} width={80} />\n      )}\n    </Flex>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({  publicIfoData }) => {\n  const { t } = useTranslation()\n  const status  = Number(publicIfoData.status)\n \n  \n   \n    \n  \nif(status!==-2)\n  return <Box paddingTop=\"24px\">\n  <FooterEntry label={t('BNB raised:')} value={(\"\".concat(getFullDisplayBalance(new BigNumber(publicIfoData.sold), publicIfoData.decimals, 2).toString()))} />\n  <FooterEntry label={t('Token sold:')} value={(\"\".concat((Number(publicIfoData.sold)/Number(publicIfoData.costPresale)).toString()))} />\n  </Box>\n  return <Box paddingTop=\"24px\">\n  <SkeletonCardDetails />\n  </Box>\n}\n\nexport default IfoCardDetails\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Card, CardBody, CardHeader, Text, useTooltip, HelpIcon, Flex } from '@pancakeswap/uikit'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { EnableStatus } from '../types'\nimport IfoCardTokens from './IfoCardTokens'\nimport IfoCardActions from './IfoCardActions'\nimport IfoCardDetails from './IfoCardDetails'\n\ninterface IfoCardProps {\n\n  publicIfoData: PublicIfoData3\n  onApprove: () => Promise<any>\n\n}\n\ninterface CardConfig {\n  [key: string]: {\n    title: string\n    variant: 'blue' | 'violet'\n    tooltip: string\n  }\n}\n\nconst cardConfig: CardConfig = {\n  [PoolIds.poolBasic]: {\n    title: 'Basic Sale',\n    variant: 'blue',\n    tooltip: 'Every person can only commit a limited amount, but may expect a higher return per token committed.',\n  },\n  [PoolIds.poolUnlimited]: {\n    title: 'Unlimited Sale',\n    variant: 'violet',\n    tooltip: 'No limits on the amount you can commit. Additional fee applies when claiming.',\n  },\n}\n\nconst SmallCard: React.FC<IfoCardProps> = ({ publicIfoData,onApprove }) => {\n  const { t } = useTranslation()\n  const { hasProfile, isLoading: isProfileLoading } = useProfile()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('No limits on the amount you can commit. Additional fee applies when claiming.'), { placement: 'bottom' })\n\n  \n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <Card>\n        <CardHeader variant='violet'>\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text bold fontSize=\"20px\">\n              {t('Pre Sale')}\n            </Text>\n            <div ref={targetRef}>\n              <HelpIcon />\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <IfoCardTokens\n            publicIfoData={publicIfoData}\n            onApprove={onApprove}\n          />\n          <IfoCardActions\n            publicIfoData={publicIfoData}\n          />\n          <IfoCardDetails  publicIfoData={publicIfoData} />\n        </CardBody>\n      </Card>\n    </   >\n  )\n}\n\nexport default SmallCard\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Link, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { PublicIfoData3 } from 'views/Ifos/types'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\n\nconst Timer: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status } = publicIfoData\n  const countdownToUse = status === -1 ? publicIfoData.startPresaleTime :  publicIfoData.endPresaleTime\n  console.log(Number(publicIfoData.startPresaleTime),Number(publicIfoData.endPresaleTime))\n  const timeUntil = getTimePeriods(countdownToUse)\n  const suffix = status === -1 ? t('Start').toLowerCase() : t('Finish').toLowerCase()\n  return (\n    <Flex justifyContent=\"center\" mb=\"32px\">\n      {status ===-1 ? (\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\n      ) : (\n        <>\n          <PocketWatchIcon width=\"48px\" mr=\"16px\" />\n          <Flex alignItems=\"center\">\n            <Text bold mr=\"16px\">        \n              {suffix}:\n            </Text>\n            <Text>\n              {t('%day%d %hour%h %minute%m', {\n                day: timeUntil.days,\n                hour: timeUntil.hours,\n                minute: timeUntil.minutes,\n              })}\n            </Text>\n           \n          </Flex>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default Timer\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, LinkExternal, Image, Text, PrizeIcon, Skeleton, WalletIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { Ifo } from 'config/constants/types'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { getBscScanLink } from 'utils'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\n\nconst MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\n\nconst Container = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n    align-items: initial;\n  }\n`\n\nconst AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\n  ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  margin-top: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n  }\n`\n\nconst Achievement: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n\n\n  return (\n    <Container>\n      <AchievementFlex isFinished={publicIfoData.status === 0} alignItems=\"center\" flexGrow={1}>\n        <Flex flexDirection=\"column\">\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('ILO: %title%', { title: publicIfoData.name })}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <WalletIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\n              <Text color=\"textSubtle\">{Number(publicIfoData.users)} &nbsp;</Text>\n              <Text color=\"textSubtle\">{\" Participants\"}</Text>\n            </Flex>\n          </Flex>\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('Listing:')}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <Text color=\"textSubtle\">1 BNB =  &nbsp;</Text>\n              <Text color=\"textSubtle\">{1000000000000000000/publicIfoData.costPresale}&nbsp;{publicIfoData.symbol}</Text>\n            </Flex>\n          </Flex>\n          <StyledLinkExternal href={publicIfoData.link} mb=\"8px\">\n          {t('Learn more about %title%', { title: publicIfoData.name })}\n        </StyledLinkExternal>\n        </Flex>\n      </AchievementFlex>\n      <Flex alignItems=\"flex-end\" flexDirection=\"column\">\n      <Flex>\n            <Text bold mr=\"8px\">\n              {t('Softcap: ')}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <Text color=\"textSubtle\">{Number(publicIfoData.softcap)/1000000000000000000}&nbsp;BNB</Text>\n           </Flex>\n          </Flex>\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('Hardcap: ')}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <Text color=\"textSubtle\">{Number(publicIfoData.hardcap)/1000000000000000000}&nbsp;BNB</Text>\n           </Flex>\n          </Flex>\n        <StyledLinkExternal href=\"asd\">{t('View Contract')}</StyledLinkExternal>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default Achievement\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\n\nconst useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.approve(spenderAddress, ethers.constants.MaxUint256)\n    await tx.wait()\n  }, [spenderAddress, tokenContract])\n\n  return onApprove\n}\n\nexport default useIfoApprove\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardRibbon,\n  ExpandableButton,\n  Progress,\n  Button,\n  ChevronUpIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { PublicIfoData3 } from 'views/Ifos/types'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { Address } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { EnableStatus } from './types'\nimport IfoPoolCard from './IfoPoolCard'\nimport Timer from './Timer'\nimport Achievement from './Achievement'\nimport useIfoApprove from '../../hooks/useIfoApprove'\n\n\ninterface IfoFoldableCardProps {\n  publicIfoData: PublicIfoData3\n}\n\nconst getRibbonComponent = (status: string, t: any) => {\n  if (status === 'cancelled') {\n    return <CardRibbon variantColor=\"textDisabled\" ribbonPosition=\"left\" text={t('Coming Soon')} />\n  }\n\n  if (status === 'live' || (status === 'finished')) {\n    return (\n      <CardRibbon\n        variantColor=\"primary\"\n        ribbonPosition=\"left\"\n        style={{ textTransform: 'uppercase' }}\n        text={status === 'live' ? `${t('Live')}!` : `${t('Finished')}!`}\n      />\n    )\n  }\n\n  return null\n}\n\nconst StyledCard = styled(Card)`\n  max-width: 736px;\n  width: 100%;\n  margin: auto;\n`\n\nconst Header = styled(CardHeader)`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: 112px;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  background-image: #000000;\n`\n\nconst FoldableContent = styled.div<{ isActive: boolean }>`\n  display: block;\n  background: ${({ isActive, theme }) => (isActive ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\n`\n\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\n  display: block;\n  margin-left: 25%;\n  margin-right: 25%;\n  margin-bottom: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  padding: 24px 16px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 24px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  text-align: center;\n  padding: 8px;\n  background: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nconst IfoFoldableCard: React.FC<IfoFoldableCardProps> = ({  publicIfoData }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const ilotokenaddress:Address={97:\"\"};\n  const raisingTokenContract = useERC20(getAddress(tokens.wbnb.address))\n  const Ribbon = getRibbonComponent(Number(publicIfoData.status)===-1?'cancelled':Number(publicIfoData.status)===0?'live':Number(publicIfoData.status)===1?\"success and Live\":Number(publicIfoData.status)===2?\"finished\":\"\", t)\n  const isActive = publicIfoData.status !== 2&& publicIfoData.status !== -1\n \n  const onApprove = useIfoApprove(raisingTokenContract, account)\n  const { toastSuccess } = useToast()\n\n  const handleApprove = async () => {\n    try {\n\n      await onApprove()\n\n      toastSuccess(\n        t('Successfully Enabled!'),\n        t('You can now participate in the IFO.')\n      )\n    } catch (error) {\n      console.log(\"error\")\n    }\n  }\n\n  \n\n  return (\n    <StyledCard ribbon={Ribbon}>\n    <Header />\n      <FoldableContent  isActive={publicIfoData.status !== -1 && publicIfoData.status !== 2}>\n        {isActive && <Progress variant=\"flat\" primaryStep={100*(publicIfoData.sold/publicIfoData.softcap)} />}\n        <StyledCardBody>\n          {isActive && <Timer publicIfoData={publicIfoData} />}\n          <CardsWrapper singleCard={!false}>\n          \n              <IfoPoolCard\n                publicIfoData={publicIfoData}\n                onApprove={handleApprove}\n              />\n            \n            \n          </CardsWrapper>\n          <Achievement publicIfoData={publicIfoData} />\n        </StyledCardBody>\n        \n      </FoldableContent>\n    </StyledCard>\n  )\n}\n\nexport default IfoFoldableCard\n","import styled from 'styled-components'\n\nconst IfoLayout = styled.div`\n  display: flex;\n  padding: 40px 0;\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport default IfoLayout\n","import React from 'react'\nimport { ifosConfig } from 'config/constants'\nimport useGetPublicIfoData from 'views/Ifos/hooks/v3/useGetPublicIfoData'\nimport useGetWalletIfoData from 'views/Ifos/hooks/v3/useGetWalletIfoData'\nimport IfoFoldableCard from './components/IfoFoldableCard'\nimport IfoLayout from './components/IfoLayout'\nimport IfoSteps from './components/IfoSteps'\nimport IfoQuestions from './components/IfoQuestions'\nimport { PublicIfoData3 } from './types'\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  const publicIfoData:PublicIfoData3 = useGetPublicIfoData()\n if(publicIfoData.status)\n  return (\n    <IfoLayout>\n      <IfoFoldableCard  publicIfoData={publicIfoData}  />\n      \n    </IfoLayout>\n  )\n  return (\n    <IfoLayout/>\n  )\n}\n\nexport default Ifo\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Flex } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport Hero from './components/Hero'\nimport CurrentIfo from './CurrentIfo'\nimport PastIfo from './PastIfo'\n\nconst Ifos = () => {\n  const { t } = useTranslation()\n  const { path, url, isExact } = useRouteMatch()\n\n  return (\n    <>\n      <Hero />\n      <Container>\n        \n        <Route exact path={`${path}`}>\n          <CurrentIfo />\n        </Route>\n       \n      </Container>\n    </>\n  )\n}\n\nexport default Ifos\n"],"sourceRoot":""}